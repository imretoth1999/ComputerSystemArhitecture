     1                                  ;(a+b)-(a+d)+(c-a) - signed
     2                                  bits 32 ;assembling for the 32 bits architecture
     3                                  ; the start label will be the entry point in the program
     4                                  global  start 
     5                                  extern  exit ; we inform the assembler that the exit symbol is foreign, i.e. it exists even if we won't be defining it
     6                                  
     7                                  import  exit msvcrt.dll; exit is a function that ends the process, it is defined in msvcrt.dll
     8                                          ; msvcrt.dll contains exit, printf and all the other important C-runtime functions
     9                                  segment  data use32 class=data ; the data segment where the variables are declared 
    10 00000000 0A                      	a  db 10
    11 00000001 ECFF                    	b  dw -20
    12 00000003 CEFFFFFF                    c  dd -50
    13 00000007 ECFFFFFFFFFFFFFF            d  dq -20 
    14                                  segment  code use32 class=code ; code segment
    15                                  start:
    16 00000000 A0[00000000]                mov AL,[a];AL has a
    17 00000005 6698                        cbw ;convert byte to word
    18 00000007 660305[01000000]            add AX,[b];we do a+b
    19 0000000E 6699                        cwd ;we convert the result to dword
    20 00000010 6652                        push dx;we push DX:AX
    21 00000012 6650                        push ax
    22 00000014 58                          pop EAX; we transform dx:ax to eax
    23 00000015 89C3                        mov EBX,EAX;we move eax to ebx bc we have a better plan for EAX
    24 00000017 8B0D[07000000]              mov ECX,[d];we move ECX
    25 0000001D A0[00000000]                mov AL,[a];we move a to AL
    26 00000022 6698                        cbw;we convert the byte to word
    27 00000024 6699                        cwd;we convert the word to doublew
    28 00000026 6652                        push dx;we push the pair DX:AX
    29 00000028 6650                        push ax 
    30 0000002A 58                          pop EAX ;we get EAX
    31 0000002B 01C8                        add EAX,ECX ;we add EAX with ECX
    32 0000002D 29C3                        sub EBX,EAX;we subtract EBX from EAX (a+b) from (a+d)
    33 0000002F A0[00000000]                mov AL,[a];we move the byte a into AL
    34 00000034 6698                        cbw ;we conver tto word
    35 00000036 6699                        cwd ;we convert to doublew
    36 00000038 6652                        push DX;we push the pair
    37 0000003A 6650                        push AX
    38 0000003C 58                          pop EAX ;we pop the result
    39 0000003D 8B0D[03000000]              mov ECX,[c];we move C into ECX
    40 00000043 29C1                       sub ECX,EAX ;we subtract from c the EAX
    41 00000045 01CB                       add EBX,ECX;we add EBX with the result from the previous command
    42                                  
    43                                      
    44 00000047 6A00                        push dword 0
    45 00000049 FF15[00000000]              call [exit]
