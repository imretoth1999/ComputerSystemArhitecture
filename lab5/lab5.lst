     1                                  ;Se dau doua siruri de octeti S1 si S2 de aceeasi lungime. Sa se construiasca sirul D astfel: fiecare element de pe pozitiile pare din D este suma elementelor de pe pozitiile corespunzatoare din S1 si S2, iar fiecar
     2                                  bits 32 
     3                                  global start        
     4                                  extern exit,printf ; tell nasm that exit exists even if we won't be defining it
     5                                  import exit msvcrt.dll ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     6                                  import printf msvcrt.dll
     7                                  ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
     8                                  ; our data is declared here (the variables needed by our program)
     9                                  segment data use32 class=data
    10 00000000 01020304                	s db 1,2,3,4 ; declararea sirului initial s
    11                                  	l equ $-s ; stabilirea lungimea sirului initial l
    12 00000004 05060708                    s1 db 5,6,7,8
    13 00000008 00<rept>                	d times l db 0 ; rezervarea unui spatiu de dimensiune l pentru sirul destinatie d si initializarea acestuia
    14                                  
    15                                  segment code use32 class=code
    16                                  start:
    17 00000000 B904000000              	mov ecx, l ;ECX=4h
    18 00000005 BE00000000                  mov esi,0;ESI = 0h
    19 0000000A E32D                        jecxz End
    20                                      Repeat:
    21 0000000C B800000000                          mov EAX,0;EAX = 0h
    22 00000011 BB00000000                          mov EBX,0;EBX = 0h
    23 00000016 8A86[00000000]                      mov AL,[s+esi];AL =00000001h
    24 0000001C 8A9E[04000000]                      mov BL,[s1+esi] ;BL= 00000005h
    25 00000022 89F2                                mov EDX,ESI;EDX = 0h
    26 00000024 D0EA                                shr DL,1; EDX= 0h,CF = 0
    27 00000026 7202                                jc odd ; if its odd the carry flag is 1
    28 00000028 7304                                jnc even ;if its even the carry flag is 0
    29 0000002A 28D8                    odd:        sub AL,BL ;AL =000000FCh AL= 0000000FCh
    30 0000002C EB02                    JMP final
    31 0000002E 00D8                    even:       add AL,BL ;AL=00000006h AL = 000000000Ah
    32                                  final:
    33 00000030 8886[08000000]              mov [d+esi],AL ;d[0] = 6 d[1] = FC d[2] = A; d[3] = FC 
    34 00000036 46                          inc ESI   ; ESI = 1;ESI = 2;ESI=3;ESI=4
    35                                  
    36                                  
    37 00000037 E2D3                        loop Repeat
    38                                      End:    
    39 00000039 6A00                    	push dword 0 ; push the parameter for exit onto the stack
    40 0000003B FF15[00000000]          	call [exit] ; call exit to terminate the program
